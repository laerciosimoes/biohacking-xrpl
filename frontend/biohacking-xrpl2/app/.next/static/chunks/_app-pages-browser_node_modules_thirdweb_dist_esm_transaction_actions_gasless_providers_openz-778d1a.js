"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_transaction_actions_gasless_providers_openz-778d1a"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainAwareForwardRequest: function() { return /* binding */ ChainAwareForwardRequest; },\n/* harmony export */   ForwardRequest: function() { return /* binding */ ForwardRequest; },\n/* harmony export */   prepareOpenZeppelinTransaction: function() { return /* binding */ prepareOpenZeppelinTransaction; },\n/* harmony export */   relayOpenZeppelinTransaction: function() { return /* binding */ relayOpenZeppelinTransaction; }\n/* harmony export */ });\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../contract/contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _utils_encoding_helpers_is_hex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/encoding/helpers/is-hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _read_contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n\n\n\n\n/**\n * @internal - only exported for testing\n */\nasync function prepareOpenZeppelinTransaction({ account, serializableTransaction, transaction, gasless, }) {\n    const forrwaderContract = (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_0__.getContract)({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client,\n    });\n    const nonce = await (0,_read_contract_js__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n        contract: forrwaderContract,\n        method: \"function getNonce(address) view returns (uint256)\",\n        params: [account.address],\n    });\n    const [signature, message] = await (async () => {\n        // TODO: handle special case for `approve` -> `permit` transactions\n        if (!serializableTransaction.to) {\n            throw new Error(\"OpenZeppelin transactions must have a 'to' address\");\n        }\n        if (!serializableTransaction.gas) {\n            throw new Error(\"OpenZeppelin transactions must have a 'gas' value\");\n        }\n        if (!serializableTransaction.data) {\n            throw new Error(\"OpenZeppelin transactions must have a 'data' value\");\n        }\n        // chainless support!\n        if (gasless.experimentalChainlessSupport) {\n            const message = {\n                from: account.address,\n                to: serializableTransaction.to,\n                value: 0n,\n                gas: serializableTransaction.gas,\n                nonce: nonce,\n                data: serializableTransaction.data,\n                chainid: BigInt(transaction.chain.id),\n            };\n            return [\n                await account.signTypedData({\n                    domain: {\n                        name: \"GSNv2 Forwarder\",\n                        version: \"0.0.1\",\n                        verifyingContract: forrwaderContract.address,\n                    },\n                    message,\n                    primaryType: \"ForwardRequest\",\n                    types: { ForwardRequest: ChainAwareForwardRequest },\n                }),\n                message,\n            ];\n        }\n        // else non-chainless support\n        const message = {\n            from: account.address,\n            to: serializableTransaction.to,\n            value: 0n,\n            gas: serializableTransaction.gas,\n            nonce: nonce,\n            data: serializableTransaction.data,\n        };\n        return [\n            await account.signTypedData({\n                domain: {\n                    name: gasless.domainName ?? \"GSNv2 Forwarder\",\n                    version: gasless.domainVersion ?? \"0.0.1\",\n                    chainId: transaction.chain.id,\n                    verifyingContract: forrwaderContract.address,\n                },\n                message,\n                primaryType: \"ForwardRequest\",\n                types: { ForwardRequest },\n            }),\n            message,\n        ];\n    })();\n    // TODO: handle special case for `approve` -> `permit`\n    const messageType = \"forward\";\n    return { message, signature, messageType };\n}\nconst ForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n];\nconst ChainAwareForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n    { name: \"chainid\", type: \"uint256\" },\n];\n/**\n * @internal\n */\nasync function relayOpenZeppelinTransaction(options) {\n    const { message, messageType, signature } = await prepareOpenZeppelinTransaction(options);\n    const response = await fetch(options.gasless.relayerUrl, {\n        method: \"POST\",\n        body: (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)({\n            request: message,\n            type: messageType,\n            signature,\n            forwarderAddress: options.gasless.relayerForwarderAddress,\n        }),\n    });\n    if (!response.ok) {\n        response.body?.cancel();\n        throw new Error(`Failed to send transaction: ${await response.text()}`);\n    }\n    const json = await response.json();\n    if (!json.result) {\n        throw new Error(`Relay transaction failed: ${json.message}`);\n    }\n    const transactionHash = JSON.parse(json.result).txHash;\n    if ((0,_utils_encoding_helpers_is_hex_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(transactionHash)) {\n        return {\n            transactionHash,\n            chain: options.transaction.chain,\n            client: options.transaction.client,\n        };\n    }\n    throw new Error(`Failed to send transaction: ${(0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)(json)}`);\n}\n//# sourceMappingURL=openzeppelin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS90cmFuc2FjdGlvbi9hY3Rpb25zL2dhc2xlc3MvcHJvdmlkZXJzL29wZW56ZXBwZWxpbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErRDtBQUNNO0FBQ2Y7QUFDRztBQUN6RDtBQUNBO0FBQ0E7QUFDTyxnREFBZ0QseURBQXlEO0FBQ2hILDhCQUE4QixrRUFBVztBQUN6QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0JBQXdCLCtEQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsNkJBQTZCLDBDQUEwQztBQUN2RSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLHlCQUF5QixnQkFBZ0I7QUFDekMsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1AsTUFBTSwrQkFBK0I7QUFDckMsTUFBTSw2QkFBNkI7QUFDbkMsTUFBTSxnQ0FBZ0M7QUFDdEMsTUFBTSw4QkFBOEI7QUFDcEMsTUFBTSxnQ0FBZ0M7QUFDdEMsTUFBTSw2QkFBNkI7QUFDbkM7QUFDTztBQUNQLE1BQU0sK0JBQStCO0FBQ3JDLE1BQU0sNkJBQTZCO0FBQ25DLE1BQU0sZ0NBQWdDO0FBQ3RDLE1BQU0sOEJBQThCO0FBQ3BDLE1BQU0sZ0NBQWdDO0FBQ3RDLE1BQU0sNkJBQTZCO0FBQ25DLE1BQU0sa0NBQWtDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0EsY0FBYyx5REFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVEQUF1RCxzQkFBc0I7QUFDN0U7QUFDQTtBQUNBO0FBQ0EscURBQXFELGFBQWE7QUFDbEU7QUFDQTtBQUNBLFFBQVEsd0VBQUs7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQseURBQVMsT0FBTztBQUNuRTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS90cmFuc2FjdGlvbi9hY3Rpb25zL2dhc2xlc3MvcHJvdmlkZXJzL29wZW56ZXBwZWxpbi5qcz9jMzg5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENvbnRyYWN0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbnRyYWN0L2NvbnRyYWN0LmpzXCI7XG5pbXBvcnQgeyBpc0hleCB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9lbmNvZGluZy9oZWxwZXJzL2lzLWhleC5qc1wiO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2pzb24uanNcIjtcbmltcG9ydCB7IHJlYWRDb250cmFjdCB9IGZyb20gXCIuLi8uLi8uLi9yZWFkLWNvbnRyYWN0LmpzXCI7XG4vKipcbiAqIEBpbnRlcm5hbCAtIG9ubHkgZXhwb3J0ZWQgZm9yIHRlc3RpbmdcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVPcGVuWmVwcGVsaW5UcmFuc2FjdGlvbih7IGFjY291bnQsIHNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLCB0cmFuc2FjdGlvbiwgZ2FzbGVzcywgfSkge1xuICAgIGNvbnN0IGZvcnJ3YWRlckNvbnRyYWN0ID0gZ2V0Q29udHJhY3Qoe1xuICAgICAgICBhZGRyZXNzOiBnYXNsZXNzLnJlbGF5ZXJGb3J3YXJkZXJBZGRyZXNzLFxuICAgICAgICBjaGFpbjogdHJhbnNhY3Rpb24uY2hhaW4sXG4gICAgICAgIGNsaWVudDogdHJhbnNhY3Rpb24uY2xpZW50LFxuICAgIH0pO1xuICAgIGNvbnN0IG5vbmNlID0gYXdhaXQgcmVhZENvbnRyYWN0KHtcbiAgICAgICAgY29udHJhY3Q6IGZvcnJ3YWRlckNvbnRyYWN0LFxuICAgICAgICBtZXRob2Q6IFwiZnVuY3Rpb24gZ2V0Tm9uY2UoYWRkcmVzcykgdmlldyByZXR1cm5zICh1aW50MjU2KVwiLFxuICAgICAgICBwYXJhbXM6IFthY2NvdW50LmFkZHJlc3NdLFxuICAgIH0pO1xuICAgIGNvbnN0IFtzaWduYXR1cmUsIG1lc3NhZ2VdID0gYXdhaXQgKGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogaGFuZGxlIHNwZWNpYWwgY2FzZSBmb3IgYGFwcHJvdmVgIC0+IGBwZXJtaXRgIHRyYW5zYWN0aW9uc1xuICAgICAgICBpZiAoIXNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLnRvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcGVuWmVwcGVsaW4gdHJhbnNhY3Rpb25zIG11c3QgaGF2ZSBhICd0bycgYWRkcmVzc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLmdhcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3BlblplcHBlbGluIHRyYW5zYWN0aW9ucyBtdXN0IGhhdmUgYSAnZ2FzJyB2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wZW5aZXBwZWxpbiB0cmFuc2FjdGlvbnMgbXVzdCBoYXZlIGEgJ2RhdGEnIHZhbHVlXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNoYWlubGVzcyBzdXBwb3J0IVxuICAgICAgICBpZiAoZ2FzbGVzcy5leHBlcmltZW50YWxDaGFpbmxlc3NTdXBwb3J0KSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIGZyb206IGFjY291bnQuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICB0bzogc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24udG8sXG4gICAgICAgICAgICAgICAgdmFsdWU6IDBuLFxuICAgICAgICAgICAgICAgIGdhczogc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24uZ2FzLFxuICAgICAgICAgICAgICAgIG5vbmNlOiBub25jZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBzZXJpYWxpemFibGVUcmFuc2FjdGlvbi5kYXRhLFxuICAgICAgICAgICAgICAgIGNoYWluaWQ6IEJpZ0ludCh0cmFuc2FjdGlvbi5jaGFpbi5pZCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBhd2FpdCBhY2NvdW50LnNpZ25UeXBlZERhdGEoe1xuICAgICAgICAgICAgICAgICAgICBkb21haW46IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiR1NOdjIgRm9yd2FyZGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBcIjAuMC4xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlpbmdDb250cmFjdDogZm9ycndhZGVyQ29udHJhY3QuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeVR5cGU6IFwiRm9yd2FyZFJlcXVlc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZXM6IHsgRm9yd2FyZFJlcXVlc3Q6IENoYWluQXdhcmVGb3J3YXJkUmVxdWVzdCB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVsc2Ugbm9uLWNoYWlubGVzcyBzdXBwb3J0XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBmcm9tOiBhY2NvdW50LmFkZHJlc3MsXG4gICAgICAgICAgICB0bzogc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24udG8sXG4gICAgICAgICAgICB2YWx1ZTogMG4sXG4gICAgICAgICAgICBnYXM6IHNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLmdhcyxcbiAgICAgICAgICAgIG5vbmNlOiBub25jZSxcbiAgICAgICAgICAgIGRhdGE6IHNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLmRhdGEsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBhd2FpdCBhY2NvdW50LnNpZ25UeXBlZERhdGEoe1xuICAgICAgICAgICAgICAgIGRvbWFpbjoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnYXNsZXNzLmRvbWFpbk5hbWUgPz8gXCJHU052MiBGb3J3YXJkZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogZ2FzbGVzcy5kb21haW5WZXJzaW9uID8/IFwiMC4wLjFcIixcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogdHJhbnNhY3Rpb24uY2hhaW4uaWQsXG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeWluZ0NvbnRyYWN0OiBmb3Jyd2FkZXJDb250cmFjdC5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBwcmltYXJ5VHlwZTogXCJGb3J3YXJkUmVxdWVzdFwiLFxuICAgICAgICAgICAgICAgIHR5cGVzOiB7IEZvcndhcmRSZXF1ZXN0IH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIF07XG4gICAgfSkoKTtcbiAgICAvLyBUT0RPOiBoYW5kbGUgc3BlY2lhbCBjYXNlIGZvciBgYXBwcm92ZWAgLT4gYHBlcm1pdGBcbiAgICBjb25zdCBtZXNzYWdlVHlwZSA9IFwiZm9yd2FyZFwiO1xuICAgIHJldHVybiB7IG1lc3NhZ2UsIHNpZ25hdHVyZSwgbWVzc2FnZVR5cGUgfTtcbn1cbmV4cG9ydCBjb25zdCBGb3J3YXJkUmVxdWVzdCA9IFtcbiAgICB7IG5hbWU6IFwiZnJvbVwiLCB0eXBlOiBcImFkZHJlc3NcIiB9LFxuICAgIHsgbmFtZTogXCJ0b1wiLCB0eXBlOiBcImFkZHJlc3NcIiB9LFxuICAgIHsgbmFtZTogXCJ2YWx1ZVwiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgIHsgbmFtZTogXCJnYXNcIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbiAgICB7IG5hbWU6IFwibm9uY2VcIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbiAgICB7IG5hbWU6IFwiZGF0YVwiLCB0eXBlOiBcImJ5dGVzXCIgfSxcbl07XG5leHBvcnQgY29uc3QgQ2hhaW5Bd2FyZUZvcndhcmRSZXF1ZXN0ID0gW1xuICAgIHsgbmFtZTogXCJmcm9tXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgeyBuYW1lOiBcInRvXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgeyBuYW1lOiBcInZhbHVlXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgeyBuYW1lOiBcImdhc1wiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgIHsgbmFtZTogXCJub25jZVwiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgIHsgbmFtZTogXCJkYXRhXCIsIHR5cGU6IFwiYnl0ZXNcIiB9LFxuICAgIHsgbmFtZTogXCJjaGFpbmlkXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG5dO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbGF5T3BlblplcHBlbGluVHJhbnNhY3Rpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgbWVzc2FnZVR5cGUsIHNpZ25hdHVyZSB9ID0gYXdhaXQgcHJlcGFyZU9wZW5aZXBwZWxpblRyYW5zYWN0aW9uKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gob3B0aW9ucy5nYXNsZXNzLnJlbGF5ZXJVcmwsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgYm9keTogc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IG1lc3NhZ2UsXG4gICAgICAgICAgICB0eXBlOiBtZXNzYWdlVHlwZSxcbiAgICAgICAgICAgIHNpZ25hdHVyZSxcbiAgICAgICAgICAgIGZvcndhcmRlckFkZHJlc3M6IG9wdGlvbnMuZ2FzbGVzcy5yZWxheWVyRm9yd2FyZGVyQWRkcmVzcyxcbiAgICAgICAgfSksXG4gICAgfSk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICByZXNwb25zZS5ib2R5Py5jYW5jZWwoKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gc2VuZCB0cmFuc2FjdGlvbjogJHthd2FpdCByZXNwb25zZS50ZXh0KCl9YCk7XG4gICAgfVxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgaWYgKCFqc29uLnJlc3VsdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlbGF5IHRyYW5zYWN0aW9uIGZhaWxlZDogJHtqc29uLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zYWN0aW9uSGFzaCA9IEpTT04ucGFyc2UoanNvbi5yZXN1bHQpLnR4SGFzaDtcbiAgICBpZiAoaXNIZXgodHJhbnNhY3Rpb25IYXNoKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoLFxuICAgICAgICAgICAgY2hhaW46IG9wdGlvbnMudHJhbnNhY3Rpb24uY2hhaW4sXG4gICAgICAgICAgICBjbGllbnQ6IG9wdGlvbnMudHJhbnNhY3Rpb24uY2xpZW50LFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzZW5kIHRyYW5zYWN0aW9uOiAke3N0cmluZ2lmeShqc29uKX1gKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW56ZXBwZWxpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js\n"));

/***/ })

}]);